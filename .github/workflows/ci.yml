name: 🚁 Drone Auto CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: 🔍 Code Validation
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: 🧹 Swift Format Check
      run: |
        # Check if swiftformat is available, install if not
        if ! command -v swiftformat &> /dev/null; then
          echo "Installing SwiftFormat..."
          brew install swiftformat
        fi
        
        # Check formatting (dry run)
        swiftformat --lint DroneAutoApp/Source/
        
    - name: 🔍 Swift Lint
      run: |
        # Check if swiftlint is available, install if not  
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint..."
          brew install swiftlint
        fi
        
        # Run SwiftLint
        swiftlint DroneAutoApp/Source/
        
    - name: ✅ Build Check
      run: |
        # Validate Swift package (if applicable)
        if [ -f "Package.swift" ]; then
          swift package resolve
        fi
        
        echo "✅ Code validation completed successfully!"
        
  safety-check:
    name: 🛡️ Safety Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Safety Keywords Check
      run: |
        echo "🔍 Checking for safety-critical code patterns..."
        
        # Check for safety-related keywords in the code
        safety_patterns=(
          "altitude.*validation"
          "battery.*check"
          "gps.*signal"
          "coordinate.*valid"
          "safety.*check"
        )
        
        safety_found=0
        for pattern in "${safety_patterns[@]}"; do
          if grep -r -i "$pattern" DroneAutoApp/Source/ > /dev/null; then
            echo "✅ Found safety pattern: $pattern"
            safety_found=$((safety_found + 1))
          fi
        done
        
        if [ $safety_found -ge 3 ]; then
          echo "✅ Safety validation passed ($safety_found/5 patterns found)"
        else
          echo "⚠️ Safety validation warning: Only $safety_found/5 safety patterns found"
        fi
        
    - name: 📋 Documentation Check
      run: |
        echo "📋 Checking documentation completeness..."
        
        required_files=(
          "README.md"
          "LICENSE"
          "CONTRIBUTING.md"
          ".gitignore"
        )
        
        missing_files=0
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            missing_files=$((missing_files + 1))
          else
            echo "✅ Found: $file"
          fi
        done
        
        if [ $missing_files -eq 0 ]; then
          echo "✅ All required documentation files present"
        else
          echo "❌ Missing $missing_files required files"
          exit 1
        fi
